package routes

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/wpcodevo/golang-gorm-postgres/controllers"
	"github.com/wpcodevo/golang-gorm-postgres/initializers"
	"github.com/wpcodevo/golang-gorm-postgres/models"
	"github.com/wpcodevo/golang-gorm-postgres/utils"
	"gorm.io/gorm"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
)

func SetupPCRouter(profileController *controllers.ProfileController) *gin.Engine {
	r := gin.Default()

	userRouteController := NewRouteProfileController(*profileController)

	api := r.Group("/api")
	userRouteController.ProfileRoute(api)

	return r
}

func SetupPCController() controllers.ProfileController {
	var err error
	config, err := initializers.LoadConfig("../.")
	if err != nil {
		log.Fatal("üöÄ Could not load environment variables", err)
	}

	initializers.ConnectDB(&config)
	initializers.InitCasbin(&config)

	profileController := controllers.NewProfileController(initializers.DB)
	profileController.DB.Exec("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"")

	if err := profileController.DB.AutoMigrate(
		&models.User{},
		&models.Profile{},
		&models.Service{},
		&models.Photo{},
		&models.ProfileOption{},
		&models.UserRating{},
		&models.ProfileRating{},
		&models.ProfileTag{}); err != nil {
		panic("failed to migrate database: " + err.Error())
	}

	return profileController
}

func PopulateProfileTags(db gorm.DB) []models.ProfileTag {
	var profileTags = []string{
		"–ö–ª–∞—Å—Å–∏–∫–∞",
		"–ú–∏–Ω–µ—Ç c/–±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç —Å —Ä–µ–∑–∏–Ω–∫–æ–π",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç c/–±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏ c –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º",
		"–†–∞–∑—Ä–µ—à—É –∫—É–Ω–Ω–∏–ª–∏–Ω–≥—É—Å",
		"–ú–∏–Ω–µ—Ç c/–±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏ c –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º",
		"–ú–∏–Ω–µ—Ç —Å —Ä–µ–∑–∏–Ω–∫–æ–π",
		"–ú–∞—Å—Å–∞–∂ –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π",
		"–ú–∞—Å—Å–∞–∂ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
		"–í–∞–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Å—Ç–∏–Ω–≥",
		"–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂",
		"–ü–æ—Ü–µ–ª—É–∏ –≤ –≥—É–±—ã",
		"–ú–∞—Å—Å–∞–∂ –ø—Ä–æ—Å—Ç–∞—Ç—ã",
		"–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂",
		"–ü–æ–µ–¥—É –æ—Ç–¥—ã—Ö–∞—Ç—å (–≤ –∫–ª—É–±, —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏.—Ç.–¥.). –í–µ—á–µ—Ä:",
		"–¢–∞–π—Å–∫–∏–π –±–æ–¥–∏ –º–∞—Å—Å–∞–∂",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç c/–±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏",
		"–ê–Ω–∏–ª–∏–Ω–≥—É—Å, –ø–æ–±–∞–ª—É—é —è–∑—ã—á–∫–æ–º –æ—á–∫–æ",
		"–£—Å–ª—É–≥–∏ –ì–æ—Å–ø–æ–∂–µ",
		"–£—Å–ª—É–≥–∏ —Å–µ–º–µ–π–Ω—ã–º –ø–∞—Ä–∞–º",
		"–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –ø–æ—Ü–µ–ª—É–π",
		"–≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂",
		"–°–µ–∫—Å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –º–∞–ª—å—á–∏—à–Ω–∏–∫–∏. –í–µ—á–µ—Ä:",
		"–ì—Ä—É–ø–ø–æ–≤–æ–π —Å–µ–∫—Å",
		"–°—Ç—Ä–∏–ø—Ç–∏–∑ –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π",
		"–í–µ—Ç–∫–∞ —Å–∞–∫—É—Ä—ã",
		"–°–Ω–∏–º—É—Å—å –Ω–∞ –≤–∏–¥–µ–æ",
		"–ê–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Å",
		"–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã, –Ω–∞—Ä—è–¥—ã",
		"–§–æ—Ç–æ –Ω–∞ –ø–∞–º—è—Ç—å",
		"–°–¥–µ–ª–∞—é –º–∏–Ω–µ—Ç",
		"–°—Ç—Ä–∏–ø—Ç–∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏ c –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º",
		"–ú–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏ c –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏",
		"–ú–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –¥–µ–≤—É—à–µ–∫",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –ø–∞—Ä–Ω–µ–π",
		"–°–¥–µ–ª–∞—é –∫—É–Ω–Ω–∏–ª–∏–Ω–≥—É—Å",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –¥–µ–≤–∏—à–Ω–∏–∫–∏/–≤–µ—á–µ—Ä–∏–Ω–∫–∏. –í–µ—á–µ—Ä:",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –≤–µ—á–µ—Ä–∏–Ω–∫–∏. –í–µ—á–µ—Ä:",
	}

	var tags []models.ProfileTag
	for _, profileTag := range profileTags {
		tag := models.ProfileTag{
			Name: profileTag,
		}
		tags = append(tags, tag)
	}

	tx := db.Begin()
	// Batch insert options
	if err := tx.Create(&tags).Error; err != nil {
		tx.Rollback()
		panic("failed to create profile tags: " + err.Error())
	}

	return tags
}

func TestProfileRoutes(t *testing.T) {

	//ac := SetupAuthController()
	//uc := SetupUCController()
	pc := SetupPCController()

	//authRouter := SetupACRouter(&ac)
	//userRouter := SetupUCRouter(&uc)
	profileRouter := SetupPCRouter(&pc)
	//profileTags := PopulateProfileTags(*ac.DB)
	//createOwnerUser(profileController.DB)

	//random := rand.New(rand.NewPCG(1, uint64(time.Now().Nanosecond())))

	t.Cleanup(func() {
		utils.CleanupTestUsers(pc.DB)
		utils.DropAllTables(pc.DB)
	})

	t.Run("POST /api/profiles/: fail without access token ", func(t *testing.T) {

		w := httptest.NewRecorder()

		payload := &models.CreateProfileRequest{
			Name: "Alice",
		}

		jsonPayload, err := json.Marshal(payload)
		if err != nil {
			fmt.Println("Error marshaling payload:", err)
			return
		}

		createProfileReq, _ := http.NewRequest("POST", "/api/profiles/", bytes.NewBuffer(jsonPayload))
		createProfileReq.Header.Set("Content-Type", "application/json")
		profileRouter.ServeHTTP(w, createProfileReq)

		assert.Equal(t, http.StatusUnauthorized, w.Code)

	})

}
