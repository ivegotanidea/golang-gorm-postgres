package routes

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/wpcodevo/golang-gorm-postgres/controllers"
	"github.com/wpcodevo/golang-gorm-postgres/initializers"
	"github.com/wpcodevo/golang-gorm-postgres/models"
	"github.com/wpcodevo/golang-gorm-postgres/utils"
	"gorm.io/gorm"
	"log"
	"math/rand/v2"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"time"
)

func SetupPCRouter(profileController *controllers.ProfileController) *gin.Engine {
	r := gin.Default()

	userRouteController := NewRouteProfileController(*profileController)

	api := r.Group("/api")
	userRouteController.ProfileRoute(api)

	return r
}

func SetupPCController() controllers.ProfileController {
	var err error
	config, err := initializers.LoadConfig("../.")
	if err != nil {
		log.Fatal("üöÄ Could not load environment variables", err)
	}

	initializers.ConnectDB(&config)
	initializers.InitCasbin(&config)

	profileController := controllers.NewProfileController(initializers.DB)
	profileController.DB.Exec("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"")

	if err := profileController.DB.AutoMigrate(
		&models.HairColor{},
		&models.IntimateHairCut{},
		&models.Ethnos{},
		&models.BodyType{},
		&models.ProfileBodyArt{},
		&models.BodyArt{},
		&models.City{},
		&models.User{},
		&models.Profile{},
		&models.Service{},
		&models.Photo{},
		&models.ProfileOption{},
		&models.UserRating{},
		&models.ProfileRating{},
		&models.ProfileTag{}); err != nil {
		panic("failed to migrate database: " + err.Error())
	}

	return profileController
}

func PopulateProfileTags(db gorm.DB) []models.ProfileTag {
	var profileTags = []string{
		"–ö–ª–∞—Å—Å–∏–∫–∞",
		"–ú–∏–Ω–µ—Ç c/–±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç —Å —Ä–µ–∑–∏–Ω–∫–æ–π",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç c/–±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏ c –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º",
		"–†–∞–∑—Ä–µ—à—É –∫—É–Ω–Ω–∏–ª–∏–Ω–≥—É—Å",
		"–ú–∏–Ω–µ—Ç c/–±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏ c –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º",
		"–ú–∏–Ω–µ—Ç —Å —Ä–µ–∑–∏–Ω–∫–æ–π",
		"–ú–∞—Å—Å–∞–∂ –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π",
		"–ú–∞—Å—Å–∞–∂ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
		"–í–∞–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Å—Ç–∏–Ω–≥",
		"–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂",
		"–ü–æ—Ü–µ–ª—É–∏ –≤ –≥—É–±—ã",
		"–ú–∞—Å—Å–∞–∂ –ø—Ä–æ—Å—Ç–∞—Ç—ã",
		"–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂",
		"–ü–æ–µ–¥—É –æ—Ç–¥—ã—Ö–∞—Ç—å (–≤ –∫–ª—É–±, —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏.—Ç.–¥.). –í–µ—á–µ—Ä:",
		"–¢–∞–π—Å–∫–∏–π –±–æ–¥–∏ –º–∞—Å—Å–∞–∂",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç c/–±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏",
		"–ê–Ω–∏–ª–∏–Ω–≥—É—Å, –ø–æ–±–∞–ª—É—é —è–∑—ã—á–∫–æ–º –æ—á–∫–æ",
		"–£—Å–ª—É–≥–∏ –ì–æ—Å–ø–æ–∂–µ",
		"–£—Å–ª—É–≥–∏ —Å–µ–º–µ–π–Ω—ã–º –ø–∞—Ä–∞–º",
		"–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –ø–æ—Ü–µ–ª—É–π",
		"–≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂",
		"–°–µ–∫—Å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –º–∞–ª—å—á–∏—à–Ω–∏–∫–∏. –í–µ—á–µ—Ä:",
		"–ì—Ä—É–ø–ø–æ–≤–æ–π —Å–µ–∫—Å",
		"–°—Ç—Ä–∏–ø—Ç–∏–∑ –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π",
		"–í–µ—Ç–∫–∞ —Å–∞–∫—É—Ä—ã",
		"–°–Ω–∏–º—É—Å—å –Ω–∞ –≤–∏–¥–µ–æ",
		"–ê–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Å",
		"–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã, –Ω–∞—Ä—è–¥—ã",
		"–§–æ—Ç–æ –Ω–∞ –ø–∞–º—è—Ç—å",
		"–°–¥–µ–ª–∞—é –º–∏–Ω–µ—Ç",
		"–°—Ç—Ä–∏–ø—Ç–∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏ c –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º",
		"–ú–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏ c –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º",
		"–ì–ª—É–±–æ–∫–∏–π –º–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏",
		"–ú–∏–Ω–µ—Ç –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –¥–µ–≤—É—à–µ–∫",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –ø–∞—Ä–Ω–µ–π",
		"–°–¥–µ–ª–∞—é –∫—É–Ω–Ω–∏–ª–∏–Ω–≥—É—Å",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –¥–µ–≤–∏—à–Ω–∏–∫–∏/–≤–µ—á–µ—Ä–∏–Ω–∫–∏. –í–µ—á–µ—Ä:",
		"–û–±—Å–ª—É–∂–∏–≤–∞—é –≤–µ—á–µ—Ä–∏–Ω–∫–∏. –í–µ—á–µ—Ä:",
	}

	var tags []models.ProfileTag
	for _, profileTag := range profileTags {
		tag := models.ProfileTag{
			Name: profileTag,
		}
		tags = append(tags, tag)
	}

	tx := db.Begin()
	// Batch insert options
	if err := tx.Create(&tags).Error; err != nil {
		if strings.Contains(err.Error(), "23505") {
			log.Printf("Duplicate key error: %v", err)
			tx.Rollback() // Rollback after detecting duplicate key error

			// Now run the fetch query outside the aborted transaction
			var existingTags []models.ProfileTag
			if err := db.Find(&existingTags).Error; err != nil {
				log.Fatalf("failed to fetch existing profile tags: %v", err)
				return nil
			}
			return existingTags
		}

		// Handle other errors
		tx.Rollback()
		panic("failed to create profile tags: " + err.Error())
	}

	if err := tx.Commit().Error; err != nil {
		log.Fatalf("failed to commit profile_tags transaction: %v", err)
		return nil
	}

	return tags
}

func PopulateCities(db gorm.DB) []models.City {
	var cities = []models.City{
		{Name: "almaty", AliasRu: "–ê–ª–º–∞—Ç—ã", AliasEn: "Almaty"},
		{Name: "ust-kamenogorsk", AliasRu: "–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫", AliasEn: "Ust-Kamenogorsk"},
		{Name: "zhezkazgan", AliasRu: "–ñ–µ–∑–∫–∞–∑–≥–∞–Ω", AliasEn: "Zhezkazgan"},
		{Name: "zhetysai", AliasRu: "–ñ–µ—Ç—ã—Å–∞–π", AliasEn: "Zhetysai"},
		{Name: "lisakovsk", AliasRu: "–õ–∏—Å–∞–∫–æ–≤—Å–∫", AliasEn: "Lisakovsk"},
		{Name: "astana", AliasRu: "–ê—Å—Ç–∞–Ω–∞", AliasEn: "Astana"},
		{Name: "kostanay", AliasRu: "–ö–æ—Å—Ç–∞–Ω–∞–π", AliasEn: "Kostanay"},
		{Name: "kapchagay", AliasRu: "–ö–∞–ø—á–∞–≥–∞–π", AliasEn: "Kapchagay"},
		{Name: "ridder", AliasRu: "–†–∏–¥–¥–µ—Ä", AliasEn: "Ridder"},
		{Name: "shu", AliasRu: "–®—É", AliasEn: "Shu"},
		{Name: "shymkent", AliasRu: "–®—ã–º–∫–µ–Ω—Ç", AliasEn: "Shymkent"},
		{Name: "kyzylorda", AliasRu: "–ö—ã–∑—ã–ª–æ—Ä–¥–∞", AliasEn: "Kyzylorda"},
		{Name: "balhash", AliasRu: "–ë–∞–ª—Ö–∞—à", AliasEn: "Balkhash"},
		{Name: "kaskelen", AliasRu: "–ö–∞—Å–∫–µ–ª–µ–Ω", AliasEn: "Kaskelen"},
		{Name: "shahtinsk", AliasRu: "–®–∞—Ö—Ç–∏–Ω—Å–∫", AliasEn: "Shahtinsk"},
		{Name: "karaganda", AliasRu: "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", AliasEn: "Karaganda"},
		{Name: "kokshetau", AliasRu: "–ö–æ–∫—à–µ—Ç–∞—É", AliasEn: "Kokshetau"},
		{Name: "aksay", AliasRu: "–ê–∫—Å–∞–π", AliasEn: "Aksay"},
		{Name: "kulsary", AliasRu: "–ö—É–ª—å—Å–∞—Ä—ã", AliasEn: "Kulsary"},
		{Name: "yesik", AliasRu: "–ï—Å–∏–∫", AliasEn: "Yesik"},
		{Name: "aktau", AliasRu: "–ê–∫—Ç–∞—É", AliasEn: "Aktau"},
		{Name: "taldykorgan", AliasRu: "–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω", AliasEn: "Taldykorgan"},
		{Name: "shchuchinsk", AliasRu: "–©—É—á–∏–Ω—Å–∫", AliasEn: "Shchuchinsk"},
		{Name: "stepnogorsk", AliasRu: "–°—Ç–µ–ø–Ω–æ–≥–æ—Ä—Å–∫", AliasEn: "Stepnogorsk"},
		{Name: "zharkent", AliasRu: "–ñ–∞—Ä–∫–µ–Ω—Ç", AliasEn: "Zharkent"},
		{Name: "aktobe", AliasRu: "–ê–∫—Ç–æ–±–µ", AliasEn: "Aktobe"},
		{Name: "turkestan", AliasRu: "–¢—É—Ä–∫–µ—Å—Ç–∞–Ω", AliasEn: "Turkestan"},
		{Name: "rudny", AliasRu: "–†—É–¥–Ω—ã–π", AliasEn: "Rudny"},
		{Name: "talgar", AliasRu: "–¢–∞–ª–≥–∞—Ä", AliasEn: "Talgar"},
		{Name: "shardara", AliasRu: "–®–∞—Ä–¥–∞—Ä–∞", AliasEn: "Shardara"},
		{Name: "atyrau", AliasRu: "–ê—Ç—ã—Ä–∞—É", AliasEn: "Atyrau"},
		{Name: "semey", AliasRu: "–°–µ–º–µ–π", AliasEn: "Semey"},
		{Name: "zhanaozen", AliasRu: "–ñ–∞–Ω–∞–æ–∑–µ–Ω", AliasEn: "Zhanaozen"},
		{Name: "saran", AliasRu: "–°–∞—Ä–∞–Ω—å", AliasEn: "Saran"},
		{Name: "atbasar", AliasRu: "–ê—Ç–±–∞—Å–∞—Ä", AliasEn: "Atbasar"},
		{Name: "taraz", AliasRu: "–¢–∞—Ä–∞–∑", AliasEn: "Taraz"},
		{Name: "petropavl", AliasRu: "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫", AliasEn: "Petropavl"},
		{Name: "satpayev", AliasRu: "–°–∞—Ç–ø–∞–µ–≤", AliasEn: "Satpayev"},
		{Name: "aksu", AliasRu: "–ê–∫—Å—É", AliasEn: "Aksu"},
		{Name: "tekeli", AliasRu: "–¢–µ–∫–µ–ª–∏", AliasEn: "Tekeli"},
		{Name: "uralsk", AliasRu: "–£—Ä–∞–ª—å—Å–∫", AliasEn: "Uralsk"},
		{Name: "temirtau", AliasRu: "–¢–µ–º–∏—Ä—Ç–∞—É", AliasEn: "Temirtau"},
		{Name: "kentau", AliasRu: "–ö–µ–Ω—Ç–∞—É", AliasEn: "Kentau"},
		{Name: "zyryanovsk", AliasRu: "–ó—ã—Ä—è–Ω–æ–≤—Å–∫", AliasEn: "Zyryanovsk"},
		{Name: "mangistau", AliasRu: "–ú–∞–Ω–≥–∏—Å—Ç–∞—É", AliasEn: "Mangistau"},
		{Name: "pavlodar", AliasRu: "–ü–∞–≤–ª–æ–¥–∞—Ä", AliasEn: "Pavlodar"},
		{Name: "ekibastuz", AliasRu: "–≠–∫–∏–±–∞—Å—Ç—É–∑", AliasEn: "Ekibastuz"},
		{Name: "saryagash", AliasRu: "–°–∞—Ä—ã–∞–≥–∞—à", AliasEn: "Saryagash"},
	}

	tx := db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Create(&cities).Error; err != nil {
		// Check if it's a duplicate key error
		if strings.Contains(err.Error(), "23505") {
			log.Printf("Duplicate key error: %v", err)
			// Rollback the failed transaction
			if rbErr := tx.Rollback().Error; rbErr != nil {
				log.Fatalf("failed to rollback transaction: %v", rbErr)
			}

			// Fetch and return existing records
			var existingCities []models.City
			if err := db.Find(&existingCities).Error; err != nil {
				log.Fatalf("failed to fetch existing cities: %v", err)
				return nil
			}
			return existingCities
		}

		// Handle other errors
		tx.Rollback()
		log.Fatalf("failed to create cities: %v", err)
		return nil
	}

	if err := tx.Commit().Error; err != nil {
		log.Fatalf("failed to commit cities transaction: %v", err)
		return nil
	}

	return cities
}

func PopulateEthnos(db gorm.DB) []models.Ethnos {
	var femaleEthnos = []models.Ethnos{
		{Name: "metiska", AliasRu: "–ú–µ—Ç–∏—Å–∫–∞", AliasEn: "M√©tis", Sex: "female"},
		{Name: "chuvashka", AliasRu: "–ß—É–≤–∞—à–∫–∞", AliasEn: "Chuvash", Sex: "female"},
		{Name: "kirgizka", AliasRu: "–ö–∏—Ä–≥–∏–∑–∫–∞", AliasEn: "Kyrgyz", Sex: "female"},
		{Name: "azerbaijanka", AliasRu: "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω–∫–∞", AliasEn: "Azerbaijani", Sex: "female"},
		{Name: "iranka", AliasRu: "–ò—Ä–∞–Ω–∫–∞", AliasEn: "Iranian", Sex: "female"},
		{Name: "taika", AliasRu: "–¢–∞–π–∫–∞", AliasEn: "Thai", Sex: "female"},
		{Name: "ukrainka", AliasRu: "–£–∫—Ä–∞–∏–Ω–∫–∞", AliasEn: "Ukrainian", Sex: "female"},
		{Name: "litovka", AliasRu: "–õ–∏—Ç–æ–≤–∫–∞", AliasEn: "Lithuanian", Sex: "female"},
		{Name: "ingushka", AliasRu: "–ò–Ω–≥—É—à–∫–∞", AliasEn: "Ingush", Sex: "female"},
		{Name: "dagestanka", AliasRu: "–î–∞–≥–µ—Å—Ç–∞–Ω–∫–∞", AliasEn: "Dagestani", Sex: "female"},
		{Name: "dunganka", AliasRu: "–î—É–Ω–≥–∞–Ω–∫–∞", AliasEn: "Dungan", Sex: "female"},
		{Name: "osetinka", AliasRu: "–û—Å–µ—Ç–∏–Ω–∫–∞", AliasEn: "Ossetian", Sex: "female"},
		{Name: "turkmenka", AliasRu: "–¢—É—Ä–∫–º–µ–Ω–∫–∞", AliasEn: "Turkmen", Sex: "female"},
		{Name: "mulatka", AliasRu: "–ú—É–ª–∞—Ç–∫–∞", AliasEn: "Mulatto", Sex: "female"},
		{Name: "evropeyka", AliasRu: "–ï–≤—Ä–æ–ø–µ–π–∫–∞", AliasEn: "European", Sex: "female"},
		{Name: "koreyanka", AliasRu: "–ö–æ—Ä–µ—è–Ω–∫–∞", AliasEn: "Korean", Sex: "female"},
		{Name: "beloruska", AliasRu: "–ë–µ–ª–æ—Ä—É—Å–∫–∞", AliasEn: "Belarusian", Sex: "female"},
		{Name: "chechenka", AliasRu: "–ß–µ—á–µ–Ω–∫–∞", AliasEn: "Chechen", Sex: "female"},
		{Name: "tadzhichka", AliasRu: "–¢–∞–¥–∂–∏—á–∫–∞", AliasEn: "Tajik", Sex: "female"},
		{Name: "kavkazka", AliasRu: "–ö–∞–≤–∫–∞–∑–∫–∞", AliasEn: "Caucasian", Sex: "female"},
		{Name: "slavyanka", AliasRu: "–°–ª–∞–≤—è–Ω–∫–∞", AliasEn: "Slavic", Sex: "female"},
		{Name: "turchanka", AliasRu: "–¢—É—Ä—á–∞–Ω–∫–∞", AliasEn: "Turkish", Sex: "female"},
		{Name: "evreyka", AliasRu: "–ï–≤—Ä–µ–π–∫–∞", AliasEn: "Jewish", Sex: "female"},
		{Name: "nemka", AliasRu: "–ù–µ–º–∫–∞", AliasEn: "German", Sex: "female"},
		{Name: "kazashka", AliasRu: "–ö–∞–∑–∞—à–∫–∞", AliasEn: "Kazakh", Sex: "female"},
		{Name: "frantsuzhenka", AliasRu: "–§—Ä–∞–Ω—Ü—É–∂–µ–Ω–∫–∞", AliasEn: "French", Sex: "female"},
		{Name: "latyshka", AliasRu: "–õ–∞—Ç—ã—à–∫–∞", AliasEn: "Latvian", Sex: "female"},
		{Name: "gruzinka", AliasRu: "–ì—Ä—É–∑–∏–Ω–∫–∞", AliasEn: "Georgian", Sex: "female"},
		{Name: "moldavanka", AliasRu: "–ú–æ–ª–¥–∞–≤–∞–Ω–∫–∞", AliasEn: "Moldovan", Sex: "female"},
		{Name: "bolgarka", AliasRu: "–ë–æ–ª–≥–∞—Ä–∫–∞", AliasEn: "Bulgarian", Sex: "female"},
		{Name: "bashkirka", AliasRu: "–ë–∞—à–∫–∏—Ä–∫–∞", AliasEn: "Bashkir", Sex: "female"},
		{Name: "rumynka", AliasRu: "–†—É–º—ã–Ω–∫–∞", AliasEn: "Romanian", Sex: "female"},
		{Name: "grechanka", AliasRu: "–ì—Ä–µ—á–∞–Ω–∫–∞", AliasEn: "Greek", Sex: "female"},
		{Name: "uzbechka", AliasRu: "–£–∑–±–µ—á–∫–∞", AliasEn: "Uzbek", Sex: "female"},
		{Name: "ispanka", AliasRu: "–ò—Å–ø–∞–Ω–∫–∞", AliasEn: "Spanish", Sex: "female"},
		{Name: "tatarka", AliasRu: "–¢–∞—Ç–∞—Ä–∫–∞", AliasEn: "Tatar", Sex: "female"},
		{Name: "yakutka", AliasRu: "–Ø–∫—É—Ç–∫–∞", AliasEn: "Yakut", Sex: "female"},
		{Name: "aziatka", AliasRu: "–ê–∑–∏–∞—Ç–∫–∞", AliasEn: "Asian", Sex: "female"},
		{Name: "mordvinka", AliasRu: "–ú–æ—Ä–¥–≤–∏–Ω–∫–∞", AliasEn: "Mordvin", Sex: "female"},
		{Name: "kitayanka", AliasRu: "–ö–∏—Ç–∞—è–Ω–∫–∞", AliasEn: "Chinese", Sex: "female"},
		{Name: "tsyganka", AliasRu: "–¶—ã–≥–∞–Ω–∫–∞", AliasEn: "Gypsy", Sex: "female"},
		{Name: "armyanka", AliasRu: "–ê—Ä–º—è–Ω–∫–∞", AliasEn: "Armenian", Sex: "female"},
		{Name: "italyanka", AliasRu: "–ò—Ç–∞–ª—å—è–Ω–∫–∞", AliasEn: "Italian", Sex: "female"},
		{Name: "uygurka", AliasRu: "–£–π–≥—É—Ä–∫–∞", AliasEn: "Uyghur", Sex: "female"},
		{Name: "polyachka", AliasRu: "–ü–æ–ª—è—á–∫–∞", AliasEn: "Polish", Sex: "female"},
		{Name: "arabka", AliasRu: "–ê—Ä–∞–±–∫–∞", AliasEn: "Arab", Sex: "female"},
	}
	var maleEthnos = []models.Ethnos{
		{Name: "dagestanets", AliasRu: "–î–∞–≥–µ—Å—Ç–∞–Ω–µ—Ü", AliasEn: "Dagestani", Sex: "male"},
		{Name: "slavyanin", AliasRu: "–°–ª–∞–≤—è–Ω–∏–Ω", AliasEn: "Slavic", Sex: "male"},
		{Name: "bolgarin", AliasRu: "–ë–æ–ª–≥–∞—Ä–∏–Ω", AliasEn: "Bulgarian", Sex: "male"},
		{Name: "kavkazets", AliasRu: "–ö–∞–≤–∫–∞–∑–µ—Ü", AliasEn: "Caucasian", Sex: "male"},
		{Name: "ingush", AliasRu: "–ò–Ω–≥—É—à", AliasEn: "Ingush", Sex: "male"},
		{Name: "osetinets", AliasRu: "–û—Å–µ—Ç–∏–Ω–µ—Ü", AliasEn: "Ossetian", Sex: "male"},
		{Name: "armyanin", AliasRu: "–ê—Ä–º—è–Ω–∏–Ω", AliasEn: "Armenian", Sex: "male"},
		{Name: "kazakh", AliasRu: "–ö–∞–∑–∞—Ö", AliasEn: "Kazakh", Sex: "male"},
		{Name: "ukrainets", AliasRu: "–£–∫—Ä–∞–∏–Ω–µ—Ü", AliasEn: "Ukrainian", Sex: "male"},
		{Name: "tsyganin", AliasRu: "–¶—ã–≥–∞–Ω–∏–Ω", AliasEn: "Gypsy", Sex: "male"},
		{Name: "gruzin", AliasRu: "–ì—Ä—É–∑–∏–Ω", AliasEn: "Georgian", Sex: "male"},
		{Name: "italyanets", AliasRu: "–ò—Ç–∞–ª—å—è–Ω–µ—Ü", AliasEn: "Italian", Sex: "male"},
		{Name: "evropeets", AliasRu: "–ï–≤—Ä–æ–ø–µ–µ—Ü", AliasEn: "European", Sex: "male"},
		{Name: "litovets", AliasRu: "–õ–∏—Ç–æ–≤–µ—Ü", AliasEn: "Lithuanian", Sex: "male"},
		{Name: "tadzhik", AliasRu: "–¢–∞–¥–∂–∏–∫", AliasEn: "Tajik", Sex: "male"},
		{Name: "frantsuz", AliasRu: "–§—Ä–∞–Ω—Ü—É–∑", AliasEn: "French", Sex: "male"},
		{Name: "rumyn", AliasRu: "–†—É–º—ã–Ω", AliasEn: "Romanian", Sex: "male"},
		{Name: "ispanets", AliasRu: "–ò—Å–ø–∞–Ω–µ—Ü", AliasEn: "Spanish", Sex: "male"},
		{Name: "polyak", AliasRu: "–ü–æ–ª—è–∫", AliasEn: "Polish", Sex: "male"},
		{Name: "chuvash", AliasRu: "–ß—É–≤–∞—à", AliasEn: "Chuvash", Sex: "male"},
		{Name: "turkmen", AliasRu: "–¢—É—Ä–∫–º–µ–Ω", AliasEn: "Turkmen", Sex: "male"},
		{Name: "moldavanin", AliasRu: "–ú–æ–ª–¥–∞–≤–∞–Ω–∏–Ω", AliasEn: "Moldovan", Sex: "male"},
		{Name: "kurd", AliasRu: "–ö—É—Ä–¥", AliasEn: "Kurd", Sex: "male"},
		{Name: "evrey", AliasRu: "–ï–≤—Ä–µ–π", AliasEn: "Jewish", Sex: "male"},
		{Name: "chechenets", AliasRu: "–ß–µ—á–µ–Ω–µ—Ü", AliasEn: "Chechen", Sex: "male"},
		{Name: "bashkir", AliasRu: "–ë–∞—à–∫–∏—Ä", AliasEn: "Bashkir", Sex: "male"},
		{Name: "metis", AliasRu: "–ú–µ—Ç–∏—Å", AliasEn: "M√©tis", Sex: "male"},
		{Name: "nemets", AliasRu: "–ù–µ–º–µ—Ü", AliasEn: "German", Sex: "male"},
		{Name: "mulat", AliasRu: "–ú—É–ª–∞—Ç", AliasEn: "Mulatto", Sex: "male"},
		{Name: "arab", AliasRu: "–ê—Ä–∞–±", AliasEn: "Arab", Sex: "male"},
		{Name: "latysh", AliasRu: "–õ–∞—Ç—ã—à", AliasEn: "Latvian", Sex: "male"},
		{Name: "russkiy", AliasRu: "–†—É—Å—Å–∫–∏–π", AliasEn: "Russian", Sex: "male"},
		{Name: "belorus", AliasRu: "–ë–µ–ª–æ—Ä—É—Å", AliasEn: "Belarusian", Sex: "male"},
		{Name: "dungan", AliasRu: "–î—É–Ω–≥–∞–Ω", AliasEn: "Dungan", Sex: "male"},
		{Name: "grek", AliasRu: "–ì—Ä–µ–∫", AliasEn: "Greek", Sex: "male"},
		{Name: "yakut", AliasRu: "–Ø–∫—É—Ç", AliasEn: "Yakut", Sex: "male"},
		{Name: "koreets", AliasRu: "–ö–æ—Ä–µ–µ—Ü", AliasEn: "Korean", Sex: "male"},
		{Name: "uygur", AliasRu: "–£–π–≥—É—Ä", AliasEn: "Uyghur", Sex: "male"},
		{Name: "tatarin", AliasRu: "–¢–∞—Ç–∞—Ä–∏–Ω", AliasEn: "Tatar", Sex: "male"},
		{Name: "turok", AliasRu: "–¢—É—Ä–æ–∫", AliasEn: "Turkish", Sex: "male"},
		{Name: "kitayets", AliasRu: "–ö–∏—Ç–∞–µ—Ü", AliasEn: "Chinese", Sex: "male"},
		{Name: "mordvin", AliasRu: "–ú–æ—Ä–¥–≤–∏–Ω", AliasEn: "Mordvin", Sex: "male"},
		{Name: "iranets", AliasRu: "–ò—Ä–∞–Ω–µ—Ü", AliasEn: "Iranian", Sex: "male"},
		{Name: "azerbaidzhanets", AliasRu: "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω–µ—Ü", AliasEn: "Azerbaijani", Sex: "male"},
		{Name: "uzbek", AliasRu: "–£–∑–±–µ–∫", AliasEn: "Uzbek", Sex: "male"},
		{Name: "aziat", AliasRu: "–ê–∑–∏–∞—Ç", AliasEn: "Asian", Sex: "male"},
		{Name: "kirgiz", AliasRu: "–ö–∏—Ä–≥–∏–∑", AliasEn: "Kyrgyz", Sex: "male"},
	}

	ethnos := append(femaleEthnos, maleEthnos...)

	tx := db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Create(&ethnos).Error; err != nil {
		if strings.Contains(err.Error(), "23505") {
			log.Printf("Duplicate key error: %v", err)
			if rbErr := tx.Rollback().Error; rbErr != nil {
				log.Fatalf("failed to rollback transaction: %v", rbErr)
			}

			var existingEthnos []models.Ethnos
			if err := db.Find(&existingEthnos).Error; err != nil {
				log.Fatalf("failed to fetch existing ethnos: %v", err)
				return nil
			}
			return existingEthnos
		}

		tx.Rollback()
		log.Fatalf("failed to create ethnos: %v", err)
		return nil
	}

	if err := tx.Commit().Error; err != nil {
		log.Fatalf("failed to commit ethnos transaction: %v", err)
		return nil
	}

	return ethnos
}

func PopulateBodyTypes(db gorm.DB) []models.BodyType {
	var bodyTypes = []models.BodyType{
		{Name: "hudaya", AliasRu: "–•—É–¥–∞—è", AliasEn: "Slim"},
		{Name: "stroynaya", AliasRu: "–°—Ç—Ä–æ–π–Ω–∞—è", AliasEn: "Fit"},
		{Name: "sportivnaya", AliasRu: "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è", AliasEn: "Athletic"},
		{Name: "polnaya", AliasRu: "–ü–æ–ª–Ω–∞—è", AliasEn: "Full-figured"},
	}

	tx := db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Create(&bodyTypes).Error; err != nil {
		if strings.Contains(err.Error(), "23505") {
			log.Printf("Duplicate key error: %v", err)
			if rbErr := tx.Rollback().Error; rbErr != nil {
				log.Fatalf("failed to rollback transaction: %v", rbErr)
			}

			var existingBodyTypes []models.BodyType
			if err := db.Find(&existingBodyTypes).Error; err != nil {
				log.Fatalf("failed to fetch existing body types: %v", err)
				return nil
			}
			return existingBodyTypes
		}

		tx.Rollback()
		log.Fatalf("failed to create body types: %v", err)
		return nil
	}

	if err := tx.Commit().Error; err != nil {
		log.Fatalf("failed to commit body types transaction: %v", err)
		return nil
	}

	return bodyTypes
}

func PopulateBodyArts(db gorm.DB) []models.BodyArt {
	var bodyArts = []models.BodyArt{
		{Name: "tatu", AliasRu: "–¢–∞—Ç—É–∏—Ä–æ–≤–∫–∏", AliasEn: "Tattoos"},
		{Name: "silikon_v_grudi", AliasRu: "–°–∏–ª–∏–∫–æ–Ω –≤ –≥—Ä—É–¥–∏", AliasEn: "Breast Implants"},
		{Name: "pirsing", AliasRu: "–ü–∏—Ä—Å–∏–Ω–≥", AliasEn: "Piercing"},
	}

	tx := db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Create(&bodyArts).Error; err != nil {
		if strings.Contains(err.Error(), "23505") {
			log.Printf("Duplicate key error: %v", err)
			if rbErr := tx.Rollback().Error; rbErr != nil {
				log.Fatalf("failed to rollback transaction: %v", rbErr)
			}

			var existingBodyArts []models.BodyArt
			if err := db.Find(&existingBodyArts).Error; err != nil {
				log.Fatalf("failed to fetch existing body arts: %v", err)
				return nil
			}
			return existingBodyArts
		}

		tx.Rollback()
		log.Fatalf("failed to create body arts: %v", err)
		return nil
	}

	if err := tx.Commit().Error; err != nil {
		log.Fatalf("failed to commit body arts transaction: %v", err)
		return nil
	}

	return bodyArts
}

func PopulateIntimateHairCuts(db gorm.DB) []models.IntimateHairCut {
	var intimateHairCuts = []models.IntimateHairCut{
		{Name: "polnaya_depilyatsiya", AliasRu: "–ü–æ–ª–Ω–∞—è –¥–µ–ø–∏–ª—è—Ü–∏—è", AliasEn: "Full depilation"},
		{Name: "akkuratnaya_strizhka", AliasRu: "–ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞", AliasEn: "Neat trim"},
		{Name: "naturalnaya", AliasRu: "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è", AliasEn: "Natural"},
	}

	tx := db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Create(&intimateHairCuts).Error; err != nil {
		if strings.Contains(err.Error(), "23505") {
			log.Printf("Duplicate key error: %v", err)
			if rbErr := tx.Rollback().Error; rbErr != nil {
				log.Fatalf("failed to rollback transaction: %v", rbErr)
			}

			var existingIntimateHairCuts []models.IntimateHairCut
			if err := db.Find(&existingIntimateHairCuts).Error; err != nil {
				log.Fatalf("failed to fetch existing intimate haircuts: %v", err)
				return nil
			}
			return existingIntimateHairCuts
		}

		tx.Rollback()
		log.Fatalf("failed to create intimate haircuts: %v", err)
		return nil
	}

	if err := tx.Commit().Error; err != nil {
		log.Fatalf("failed to commit intimate haircuts transaction: %v", err)
		return nil
	}

	return intimateHairCuts
}

func PopulateHairColors(db gorm.DB) []models.HairColor {
	var hairColors = []models.HairColor{
		{Name: "brunetka", AliasRu: "–ë—Ä—é–Ω–µ—Ç–∫–∞", AliasEn: "Brunette"},
		{Name: "shatenka", AliasRu: "–®–∞—Ç–µ–Ω–∫–∞", AliasEn: "Brown-haired"},
		{Name: "ryzhaya", AliasRu: "–†—ã–∂–∞—è", AliasEn: "Red-haired"},
		{Name: "rusaya", AliasRu: "–†—É—Å–∞—è", AliasEn: "Light brown"},
		{Name: "blondinka", AliasRu: "–ë–ª–æ–Ω–¥–∏–Ω–∫–∞", AliasEn: "Blonde"},
		{Name: "lysaya", AliasRu: "–õ—ã—Å–∞—è", AliasEn: "Bald"},
		{Name: "tsvetnaya", AliasRu: "–¶–≤–µ—Ç–Ω–∞—è", AliasEn: "Colored"},
	}

	tx := db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Create(&hairColors).Error; err != nil {
		if strings.Contains(err.Error(), "23505") {
			log.Printf("Duplicate key error: %v", err)
			if rbErr := tx.Rollback().Error; rbErr != nil {
				log.Fatalf("failed to rollback transaction: %v", rbErr)
			}

			var existingHairColors []models.HairColor
			if err := db.Find(&existingHairColors).Error; err != nil {
				log.Fatalf("failed to fetch existing hair colors: %v", err)
				return nil
			}
			return existingHairColors
		}

		tx.Rollback()
		log.Fatalf("failed to create hair colors: %v", err)
		return nil
	}

	if err := tx.Commit().Error; err != nil {
		log.Fatalf("failed to commit hair colors transaction: %v", err)
		return nil
	}

	return hairColors
}

func TestProfileRoutes(t *testing.T) {

	ac := SetupAuthController()

	//uc := SetupUCController()
	pc := SetupPCController()

	authRouter := SetupACRouter(&ac)
	//userRouter := SetupUCRouter(&uc)
	profileRouter := SetupPCRouter(&pc)

	profileTags := PopulateProfileTags(*pc.DB)

	cities := PopulateCities(*pc.DB)

	// filters

	bodyTypes := PopulateBodyTypes(*pc.DB)

	ethnos := PopulateEthnos(*pc.DB)

	hairColors := PopulateHairColors(*pc.DB)

	intimateHairCuts := PopulateIntimateHairCuts(*pc.DB)

	bodyArts := PopulateBodyArts(*pc.DB)

	//createOwnerUser(profileController.DB)

	random := rand.New(rand.NewPCG(1, uint64(time.Now().Nanosecond())))

	t.Cleanup(func() {
		utils.CleanupTestUsers(pc.DB)
		utils.DropAllTables(pc.DB)
	})

	t.Run("POST /api/profiles/: fail without access token ", func(t *testing.T) {

		w := httptest.NewRecorder()

		payload := &models.CreateProfileRequest{
			Name: "Alice",
		}

		jsonPayload, err := json.Marshal(payload)
		if err != nil {
			fmt.Println("Error marshaling payload:", err)
			return
		}

		createProfileReq, _ := http.NewRequest("POST", "/api/profiles/", bytes.NewBuffer(jsonPayload))
		createProfileReq.Header.Set("Content-Type", "application/json")
		profileRouter.ServeHTTP(w, createProfileReq)

		assert.Equal(t, http.StatusUnauthorized, w.Code)
	})

	t.Run("POST /api/profiles/: fail with access_token but bad json (only name) ", func(t *testing.T) {
		user := generateUser(random, authRouter, t)

		accessTokenCookie, err := loginUserGetAccessToken(t, user.Password, user.TelegramUserID, authRouter)
		w := httptest.NewRecorder()

		payload := &models.CreateProfileRequest{
			Name: "Alice",
		}

		jsonPayload, err := json.Marshal(payload)
		if err != nil {
			fmt.Println("Error marshaling payload:", err)
			return
		}

		createProfileReq, _ := http.NewRequest("POST", "/api/profiles/", bytes.NewBuffer(jsonPayload))
		createProfileReq.AddCookie(&http.Cookie{Name: accessTokenCookie.Name, Value: accessTokenCookie.Value})
		createProfileReq.Header.Set("Content-Type", "application/json")

		profileRouter.ServeHTTP(w, createProfileReq)

		assert.Equal(t, http.StatusBadRequest, w.Code)
	})

	t.Run("POST /api/profiles/: success with access_token", func(t *testing.T) {
		user := generateUser(random, authRouter, t)

		accessTokenCookie, err := loginUserGetAccessToken(t, user.Password, user.TelegramUserID, authRouter)
		w := httptest.NewRecorder()

		payload := generateCreateProfileRequest(random, cities, ethnos, profileTags, bodyArts, bodyTypes, hairColors, intimateHairCuts)

		jsonPayload, err := json.Marshal(payload)
		if err != nil {
			fmt.Println("Error marshaling payload:", err)
			return
		}

		createProfileReq, _ := http.NewRequest("POST", "/api/profiles/", bytes.NewBuffer(jsonPayload))
		createProfileReq.AddCookie(&http.Cookie{Name: accessTokenCookie.Name, Value: accessTokenCookie.Value})
		createProfileReq.Header.Set("Content-Type", "application/json")

		profileRouter.ServeHTTP(w, createProfileReq)

		var profileResponse CreateProfileResponse
		err = json.Unmarshal(w.Body.Bytes(), &profileResponse)

		assert.Equal(t, profileResponse.Status, "success")
		assert.NotNil(t, profileResponse.Data.ID)
		assert.Equal(t, profileResponse.Data.UserID, user.ID)

		assert.Equal(t, profileResponse.Data.Active, true)
		assert.Equal(t, profileResponse.Data.Verified, false)
		assert.Equal(t, profileResponse.Data.Moderated, false)
		assert.Equal(t, profileResponse.Data.Name, payload.Name)
		assert.Equal(t, profileResponse.Data.Phone, payload.Phone)
		assert.Equal(t, profileResponse.Data.ContactPhone, payload.ContactPhone)
		assert.Equal(t, profileResponse.Data.ContactTG, payload.ContactTG)
		assert.Equal(t, profileResponse.Data.ContactWA, payload.ContactWA)
		assert.NotNil(t, profileResponse.Data.CreatedAt)
		assert.NotNil(t, profileResponse.Data.UpdatedAt)
		assert.Equal(t, profileResponse.Data.UpdatedBy, user.ID)
		assert.Equal(t, len(profileResponse.Data.ProfileOptions), len(payload.Options))

		for i := 0; i < len(payload.Options); i++ {
			assert.Equal(t, profileResponse.Data.ProfileOptions[i].Comment, payload.Options[i].Comment)
			assert.NotNil(t, profileResponse.Data.ProfileOptions[i].ProfileTag.ID)
			assert.NotNil(t, profileResponse.Data.ProfileOptions[i].ProfileTag.Name)
		}

		assert.Equal(t, len(profileResponse.Data.BodyArts), len(payload.BodyArts))

		for i := 0; i < len(payload.BodyArts); i++ {
			assert.NotNil(t, profileResponse.Data.BodyArts[i].ProfileID)
			assert.Equal(t, profileResponse.Data.BodyArts[i].BodyArtID, payload.BodyArts[i].ID)
		}

		assert.Equal(t, len(profileResponse.Data.Photos), len(payload.Photos))

		for i := 0; i < len(payload.Photos); i++ {
			assert.NotNil(t, profileResponse.Data.Photos[i].ID)
			assert.NotNil(t, profileResponse.Data.Photos[i].ProfileID)
			assert.NotNil(t, profileResponse.Data.Photos[i].CreatedAt)

			assert.False(t, profileResponse.Data.Photos[i].Approved)
			assert.False(t, profileResponse.Data.Photos[i].Deleted)
			assert.False(t, profileResponse.Data.Photos[i].Disabled)

			assert.Equal(t, profileResponse.Data.Photos[i].URL, payload.Photos[i].URL)
		}

		assert.Equal(t, profileResponse.Data.BodyTypeID, payload.BodyTypeID)
		assert.Equal(t, profileResponse.Data.EthnosID, payload.EthnosID)
		assert.Equal(t, profileResponse.Data.HairColorID, payload.HairColorID)
		assert.Equal(t, profileResponse.Data.IntimateHairCutID, payload.IntimateHairCutID)
		assert.Equal(t, profileResponse.Data.CityID, payload.CityID)
		assert.Equal(t, profileResponse.Data.Age, payload.Age)
		assert.Equal(t, profileResponse.Data.Height, payload.Height)
		assert.Equal(t, profileResponse.Data.Weight, payload.Weight)
		assert.Equal(t, profileResponse.Data.Bust, payload.Bust)
		assert.Equal(t, profileResponse.Data.Bio, payload.Bio)
		assert.Equal(t, profileResponse.Data.AddressLatitude, payload.AddressLatitude)
		assert.Equal(t, profileResponse.Data.AddressLongitude, payload.AddressLongitude)

		assert.Equal(t, profileResponse.Data.PriceInHouseNightRatio, 1.0)
		assert.Equal(t, profileResponse.Data.PriceInHouseContact, payload.PriceInHouseContact)
		assert.Equal(t, profileResponse.Data.PriceInHouseHour, payload.PriceInHouseHour)

		assert.Equal(t, profileResponse.Data.PriceVisitNightRatio, 1.0)
		assert.Equal(t, profileResponse.Data.PriceVisitContact, payload.PriceVisitContact)
		assert.Equal(t, profileResponse.Data.PriceVisitHour, payload.PriceVisitHour)

		assert.Equal(t, profileResponse.Data.PriceCarNightRatio, 1.0)
		assert.Equal(t, profileResponse.Data.PriceCarContact, payload.PriceCarContact)
		assert.Equal(t, profileResponse.Data.PriceCarHour, payload.PriceCarHour)

		assert.Equal(t, profileResponse.Data.PrinceSaunaNightRatio, 1.0)
		assert.Equal(t, profileResponse.Data.PriceSaunaContact, payload.PriceSaunaContact)
		assert.Equal(t, profileResponse.Data.PriceSaunaHour, payload.PriceSaunaHour)

		assert.Equal(t, profileResponse.Data.DeletedAt.Valid, false)
		assert.Nil(t, profileResponse.Data.Services)

		assert.Equal(t, http.StatusCreated, w.Code)
	})

	//t.Run("PUT /api/profiles/: success profile update", func(t *testing.T) {
	//	user := generateUser(random, authRouter, t)
	//
	//	accessTokenCookie, err := loginUserGetAccessToken(t, user.Password, user.TelegramUserID, authRouter)
	//	w := httptest.NewRecorder()
	//
	//	payload := generateCreateProfileRequest(random, cities, ethnos, profileTags, bodyArts, bodyTypes, hairColors, intimateHairCuts)
	//
	//	jsonPayload, err := json.Marshal(payload)
	//	if err != nil {
	//		fmt.Println("Error marshaling payload:", err)
	//		return
	//	}
	//
	//	createProfileReq, _ := http.NewRequest("POST", "/api/profiles/", bytes.NewBuffer(jsonPayload))
	//	createProfileReq.AddCookie(&http.Cookie{Name: accessTokenCookie.Name, Value: accessTokenCookie.Value})
	//	createProfileReq.Header.Set("Content-Type", "application/json")
	//
	//	profileRouter.ServeHTTP(w, createProfileReq)
	//
	//	var profileResponse CreateProfileResponse
	//	err = json.Unmarshal(w.Body.Bytes(), &profileResponse)
	//
	//	updatePayload := &models.UpdateOwnProfileRequest{}
	//
	//})
}
