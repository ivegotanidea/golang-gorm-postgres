services:
  postgres:
    platform: linux/amd64
    image: postgres:16
    container_name: postgres
    ports:
      - 6500:5432
    env_file:
      - ./app.env
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - common

  pgadmin:
    platform: linux/amd64
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: rblbl@mail.ru
      PGADMIN_DEFAULT_PASSWORD: s0m30n3
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - common

  go-service:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go_service
    command: >
      sh -c "sleep 5 &&
             /app/main"
    env_file:
      - ./app.env
    depends_on:
      - postgres
    networks:
      - common

  init_db:
    platform: linux/amd64
    image: postgres:16
    container_name: postgres_init
    env_file:
      - ./app.env
    volumes:
      - ./backups:/backups
    command: >
      bash -c "
      set -x;
      echo "Started...";
      
      until PGPASSWORD=$$POSTGRES_PASSWORD psql -h $$POSTGRES_HOST -p $$POSTGRES_PORT -U $$POSTGRES_USER -d $$POSTGRES_DB -c \"\\q\"; do
        echo 'Waiting for db to be ready...';
        sleep 5;
      done;
      
      PGPASSWORD=$$POSTGRES_PASSWORD psql -h $$POSTGRES_HOST -U $$POSTGRES_USER -p $$POSTGRES_PORT -d $$POSTGRES_DB < /backups/data_backup.sql;
      echo 'Database restoration completed!'"
    depends_on:
      - postgres
    networks:
      - common
    restart: "no" # Ensures it doesn't restart after completion

  nginx:
    platform: linux/amd64
    image: nginx:latest
    container_name: nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/templates:/etc/nginx/templates
    environment:
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:4200}
      BACKEND_URL: ${BACKEND_URL:-http://go-service:8888}
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx
    depends_on:
      - go-service
    networks:
      - common

  caddy:
    image: caddy
    container_name: caddy
    ports:
      - "8081:80"   # Change HTTP port for Caddy to 8081
      - "8443:443"  # Change HTTPS port for Caddy to 8443
      - "2019:2019"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - go-service
    networks:
      - common

volumes:
  postgres:

networks:
  common: